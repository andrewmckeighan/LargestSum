
public class Main {
	/**
	 *Given a triangle of positive integers, we want to find a largest possible sum along a path from top
	 *row to bottom row. A path can go down either directly south or directly south-east (Note, you can
     *NEVER go EAST, WEST, or NORTH etc). For example, in the triangle
     *
     *1
     *2 3
     *1 5 7
     *9 1 1 2
     *8 5 4 13 2
     *
     *the path 1→3→7→2→13 is a legal path with sum 26. This path is “best” because 26 is the largest
     *such sum. Generally, suppose that the triangle is stored in an array Ann [1.. ,1.. ]with the relevant
     *entries being on the diagonal and below. For 1≤ ≤r n and 1≤ ≤c r let Brc [, ]be the sum along the
     *best path that ends in row r and column c of the matrix A.
     *Example: B[1,1] = 1, B[2,1] = 3, B[2,2] = 4
	 */
    public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
